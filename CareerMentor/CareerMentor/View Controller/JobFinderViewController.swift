////  JobFinderViewController.swift//  CareerMentor//import UIKitimport FirebaseAuthimport FirebaseFirestoreclass JobFinderViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate {    @IBOutlet weak var jobTableView: UITableView!    @IBOutlet weak var searchBar: UISearchBar!    @IBOutlet weak var usernameLabel: UILabel!    var jobs: [Job] = []    var filteredJobs: [Job] = []    let db = Firestore.firestore()    override func viewDidLoad() {        super.viewDidLoad()        jobTableView.delegate = self        jobTableView.dataSource = self        searchBar.delegate = self        fetchJobs()        loadUsername()    }    func loadUsername() {        guard let uid = Auth.auth().currentUser?.uid else { return }        db.collection("users").document(uid).getDocument { doc, error in            if let doc = doc, doc.exists {                let username = doc["username"] as? String ?? "Student"                DispatchQueue.main.async {                    self.usernameLabel.text = "Hi, \(username)!"                }            }        }    }    func fetchJobs() {        JobService.shared.fetchJobs { result in            DispatchQueue.main.async {                switch result {                case .success(let jobs):                    self.jobs = jobs                    self.filteredJobs = jobs                    self.jobTableView.reloadData()                case .failure(let error):                    print("Error fetching jobs: \(error.localizedDescription)")                }            }        }    }    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {        if searchText.isEmpty {            filteredJobs = jobs        } else {            filteredJobs = jobs.filter {                $0.title.lowercased().contains(searchText.lowercased()) ||                $0.companyName?.lowercased().contains(searchText.lowercased()) ?? false            }        }        jobTableView.reloadData()    }    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {        return filteredJobs.count    }    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {        let cell = tableView.dequeueReusableCell(withIdentifier: "JobCell", for: indexPath)        let job = filteredJobs[indexPath.row]        var content = cell.defaultContentConfiguration()        content.text = job.title        content.secondaryText = "\(job.companyName ?? "")\nLocation: \(job.candidateRequiredLocation)\nSalary: \(job.salary ?? "Not disclosed")"        content.textProperties.font = UIFont.boldSystemFont(ofSize: 16)        content.secondaryTextProperties.color = .darkGray        content.secondaryTextProperties.font = UIFont.systemFont(ofSize: 13)        if let logoURL = job.companyLogo, let url = URL(string: logoURL), let data = try? Data(contentsOf: url), let image = UIImage(data: data) {            content.image = image        } else {            content.image = UIImage(systemName: "briefcase.fill")        }        content.imageProperties.maximumSize = CGSize(width: 40, height: 40)        cell.contentConfiguration = content        return cell    }    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {        let job = filteredJobs[indexPath.row]        if let url = URL(string: job.url) {            UIApplication.shared.open(url)        }    }}
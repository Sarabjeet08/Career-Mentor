//
//  RegisterViewController.swift
//  CareerMentor
//
//  Created by user275188 on 4/11/25.
//


import UIKitimport FirebaseAuthimport FirebaseFirestoreclass RegisterViewController: UIViewController {    @IBOutlet weak var fullNameField: UITextField!    @IBOutlet weak var usernameField: UITextField!    @IBOutlet weak var emailField: UITextField!    @IBOutlet weak var passwordField: UITextField!    let db = Firestore.firestore()    @IBAction func registerTapped(_ sender: UIButton) {        guard let fullName = fullNameField.text,              let username = usernameField.text,              let email = emailField.text,              let password = passwordField.text else { return }        // Check if username already exists        db.collection("users").whereField("username", isEqualTo: username).getDocuments { (querySnapshot, error) in            if let error = error {                print("Error checking username: \(error.localizedDescription)")                return            }            if let snapshot = querySnapshot, !snapshot.isEmpty {                print("Username already taken.")                return            }            // Create user            Auth.auth().createUser(withEmail: email, password: password) { result, error in                if let error = error {                    print("Error creating user: \(error.localizedDescription)")                } else {                    guard let uid = result?.user.uid else { return }                    // Save full name, username and email                    self.db.collection("users").document(uid).setData([                        "fullName": fullName,                        "username": username,                        "email": email                    ]) { err in                        if let err = err {                            print("Error saving user data: \(err.localizedDescription)")                        } else {                            print("User registered successfully.")                            self.performSegue(withIdentifier: "toMain", sender: self)                        }                    }                }            }        }    }}
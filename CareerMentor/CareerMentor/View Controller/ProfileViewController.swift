////  ProfileViewController.swift//  CareerMentor////  Created by user275188 on 4/6/25.//import UIKitimport FirebaseAuthimport FirebaseFirestoreimport FirebaseStorageclass ProfileViewController: UIViewController, UIImagePickerControllerDelegate & UINavigationControllerDelegate {    @IBOutlet weak var profileImageView: UIImageView!    //@IBOutlet weak var fullNameLabel: UILabel!    @IBOutlet weak var emailLabel: UILabel!    @IBOutlet weak var userNameLabel:UILabel!    @IBOutlet weak var fullNameTextField: UITextField!    @IBOutlet weak var editButton: UIButton!    var isEditingName = false    override func viewDidLoad() {        super.viewDidLoad()        profileImageView.layer.cornerRadius = profileImageView.frame.width / 2        profileImageView.clipsToBounds = true        loadProfileData()        fullNameTextField.isUserInteractionEnabled = false    }    func loadProfileData() {        guard let user = Auth.auth().currentUser else { return }        emailLabel.text = user.email        let db = Firestore.firestore()        let userRef = db.collection("users").document(user.uid)        userRef.getDocument { (doc, error) in            if let doc = doc, doc.exists {                let data = doc.data()                self.fullNameTextField.text = data?["fullName"] as? String ?? "Full Name"                self.userNameLabel.text = data?["username"] as? String ?? "Username"                if let imageUrl = data?["profileImageUrl"] as? String, let url = URL(string: imageUrl) {                    URLSession.shared.dataTask(with: url) { data, _, _ in                        if let data = data {                            DispatchQueue.main.async {                                self.profileImageView.image = UIImage(data: data)                            }                        }                    }.resume()                } else {                    self.profileImageView.image = UIImage(named: "no-image")                }            }        }        // Round Image        profileImageView.layer.cornerRadius = profileImageView.frame.size.width / 2        profileImageView.clipsToBounds = true        profileImageView.image = UIImage(named: "defaultProfile") // replace with real image if needed    }    @IBAction func changePictureTapped(_ sender: Any) {        let picker = UIImagePickerController()        picker.delegate = self        picker.sourceType = .photoLibrary        present(picker, animated: true)    }    // Upload selected image to Firebase Storage    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {        picker.dismiss(animated: true)        guard let image = info[.originalImage] as? UIImage,              let imageData = image.jpegData(compressionQuality: 0.8),              let uid = Auth.auth().currentUser?.uid else { return }        let ref = Storage.storage().reference().child("userImages/\(uid)/profile.jpg")        ref.putData(imageData, metadata: nil) { metadata, error in            guard error == nil else { return }            ref.downloadURL { url, _ in                guard let url = url else { return }                Firestore.firestore().collection("users").document(uid).updateData([                    "profileImageUrl": url.absoluteString                ]) { err in                    if err == nil {                        DispatchQueue.main.async {                            self.profileImageView.image = image                        }                    }                }            }        }    }        @IBAction func editButtonTapped(_ sender: UIButton) {        isEditingName.toggle() // switch true <-> false        fullNameTextField.isUserInteractionEnabled = isEditingName        fullNameTextField.borderStyle = isEditingName ? .roundedRect : .none                // Optional: change button title        editButton.setTitle(isEditingName ? "Done" : "Edit", for: .normal)                // If finished editing, call save        if !isEditingName {            saveFullNameIfChanged()        }    }        func saveFullNameIfChanged() {        guard let user = Auth.auth().currentUser else { return }        guard let newName = fullNameTextField.text, !newName.isEmpty else { return }        let db = Firestore.firestore()        let ref = db.collection("users").document(user.uid)        ref.updateData(["fullName": newName]) { error in            if let error = error {                print("❌ Failed to update name: \(error.localizedDescription)")            } else {                print("✅ Full name updated")            }        }    }         @IBAction func changePasswordTapped(_ sender: Any) {        let alert = UIAlertController(title: "Change Password", message: "Enter new password", preferredStyle: .alert)        alert.addTextField()        alert.addAction(UIAlertAction(title: "Cancel", style: .cancel))        alert.addAction(UIAlertAction(title: "Update", style: .default, handler: { _ in            if let newPassword = alert.textFields?.first?.text {                Auth.auth().currentUser?.updatePassword(to: newPassword) { error in                    print(error == nil ? "Password Updated" : "Error: \(String(describing: error))")                }            }        }))        present(alert, animated: true)    }}